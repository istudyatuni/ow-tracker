@use "sass:list";
@use "sass:map";

@import url("https://fonts.googleapis.com/css2?family=Flow+Circular&display=swap");

$button-bg: #082638;
$spoilers-font: "Flow Circular";

:root {
  --bg: #02101b;

  font-family: system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: dark;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

body,
#app {
  width: 100%;
  height: 100vh;
  margin: 0;
  padding: 0;
  background-color: var(--bg);
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}

a:hover {
  color: #535bf2;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

.card {
  padding: 2em;
}

%pointer {
  cursor: pointer;
}

button,
select {
  @extend %pointer;

  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: $button-bg;
  transition: border-color 0.25s;
}

button:hover,
select:hover {
  border-color: #646cff;

  &[disabled] {
    border-color: $button-bg;
    cursor: default;
  }
}

button:focus,
button:focus-visible,
select:focus,
select:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

select {
  appearance: none;
}

input[type="checkbox"] {
  @extend %pointer;

  appearance: none;

  width: 1.2em;
  height: 1.2em;
  border-radius: 4px;
  position: relative;
  vertical-align: middle;
  transition:
    background-color 0.2s,
    border-color 0.2s;

  label:has(&:not([disabled])) {
    @extend %pointer;
  }
}

// checkmark, created using transformations on white border
input[type="checkbox"]:checked::after {
  content: "";
  position: absolute;
  top: 0.11em;
  left: 0.38em;
  width: 0.25em;
  height: 0.6em;
  border: solid white;
  border-width: 0 0.15em 0.15em 0;
  transform: rotate(45deg);
}

// information related to map itself, such as facts panel
.above-map-info {
  z-index: 1000;
}

// elements which should be above all map elements, including facts panel
.above-map-controls {
  z-index: 1100;
}

.more-to-explore {
  color: orange;
}

.mono {
  font-family: monospace;
}

.card-text {
  font-weight: 600;
  margin: 0;
  text-align: center;
  line-height: 1.2em;
  color: black;
}

.card-text-wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  height: 100%;
  padding: 0.3em;
}

.hidden {
  display: none;
}

rect.card,
line.arrow,
// "line.arrow +" is required to override leaflet's style for "svg path" with "pointer-events: none"
line.arrow + path.arrow {
  @extend %pointer;

  pointer-events: auto;
}

$arrow-color: gray;
$arrow-color-hover: lightgray;

// arrow line
line.arrow {
  stroke: $arrow-color;
}

// arrow head
path.arrow {
  fill: $arrow-color;
  stroke: var(--bg);
  stroke-width: 4px;
  stroke-linejoin: round;
}

// hover on arrow line
line.arrow:hover,
// hover on arrow head
line.arrow:has(+ path.arrow:hover) {
  stroke: $arrow-color-hover;

  & + path.arrow {
    fill: $arrow-color-hover;
  }
}

$categories-colors: (
  "orbital-canon": (
    #388a5d,
    #68ffac,
    "green",
  ),
  "quantum-moon": (
    #4f3a8d,
    #9068ff,
    "purple",
  ),
  "vessel": (
    #b44a4a,
    #ff6868,
    "red",
  ),
  "ash-twin-project": (
    #b4764a,
    #ffa768,
    "orange",
  ),
  "stranger": (
    #1d4a94,
    #3280ff,
    "blue",
  ),
  "nomai-fate": (
    #7f807a,
    #e2e4da,
    "gray",
  ),
);

$other-color: map.get($categories-colors, "nomai-fate");
// use "nomai-fate" colors for "other"
$categories-colors: map.set($categories-colors, "other", $other-color);

@each $name, $colors in $categories-colors {
  $c: list.nth($colors, 1);
  $highlight: list.nth($colors, 2);
  $alt-name: list.nth($colors, 3);

  input[type="checkbox"].#{$name},
  input[type="checkbox"].#{$alt-name} {
    border: 0.1px solid $c;
    background-color: rgba($c, 0.4);

    &:checked {
      background-color: $c;
      border-color: $c;
    }
  }

  // svg color by category
  .#{$name} {
    fill: $c;

    svg:hover > & {
      fill: $highlight;
    }
  }

  %#{$alt-name}-bg {
    background-color: rgba($highlight, 0.6);
  }

  span.#{$alt-name} {
    @extend %#{$alt-name}-bg;
  }

  button.#{$alt-name} {
    @extend %#{$alt-name}-bg;

    &:hover {
      border-color: $highlight;
    }
  }

  // hide cards and arrows by categories
  .hide-#{$name} svg.#{$name} {
    @extend .hidden;
  }
}

.hide-spoilers {
  & .spoiler,
  &.spoiler {
    font-family: $spoilers-font;
    font-size: 19px;
    line-height: 0.93em;
    user-select: none;
  }

  & image.spoiler,
  & .explore-star {
    @extend .hidden;
  }

  & .card {
    fill: list.nth($other-color, 1);
  }

  & svg:hover > .card {
    fill: list.nth($other-color, 2);
  }
}

// question sign background
rect.img-q-bg {
  fill: var(--bg);
}

// question sign itself
text.img-q-icon {
  fill: orange;

  .hide-spoilers & {
    fill: white;
  }
}

path.explore-star {
  stroke: orange;
}
